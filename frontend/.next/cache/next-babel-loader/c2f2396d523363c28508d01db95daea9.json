{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from 'react';\nimport { InputGroup, InputGroupAddon, Input } from \"reactstrap\";\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const {\n    0: restaurantID,\n    1: setRestaurantID\n  } = useState(0);\n  const {\n    cart\n  } = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState(cart);\n  const {\n    0: query,\n    1: setQuery\n  } = useState(\"\");\n  const API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:1337\";\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_RESTAURANTS);\n  if (loading) return __jsx(\"p\", null, \"Loading...\");\n  if (error) return __jsx(\"p\", null, \"ERROR\");\n  if (!data) return __jsx(\"p\", null, \"Not found\");\n  console.log(`Query Data: ${data.restaurants}`); // definet renderer for Dishes\n\n  const renderDishes = (restaurantID, query) => {\n    return __jsx(Dishes, {\n      restId: restaurantID,\n      query: query\n    }, \" \");\n  };\n\n  if (props.search) {\n    let searchQuery = data.restaurants.filter(res => {\n      if (res.name.toLowerCase().includes(props.search)) {\n        return res;\n      }\n    });\n\n    if (searchQuery.length > 0) {\n      console.log(\"query>0\");\n      const restList = searchQuery.map(res => __jsx(Col, {\n        xs: \"6\",\n        sm: \"4\",\n        key: res.id\n      }, __jsx(Card, {\n        style: {\n          margin: \"0 0.5rem 20px 0.5rem\"\n        }\n      }, __jsx(CardImg, {\n        top: true,\n        style: {\n          height: 200\n        },\n        src: API_URL + res.image.url\n      }), __jsx(CardBody, null, __jsx(CardText, null, res.description)), __jsx(\"div\", {\n        className: \"card-footer\"\n      }, __jsx(Button, {\n        color: \"info\",\n        onClick: () => {\n          setRestaurantID(res.id);\n          AppContext.restaurantID = res.id;\n          console.log(AppContext);\n        }\n      }, res.name)))));\n\n      const ifRestaurantIDSearchDisplay = () => {\n        if (restaurantID > 0) {\n          return __jsx(InputGroup, null, __jsx(InputGroupAddon, {\n            addonType: \"append\"\n          }, \" Search \"), __jsx(Input, {\n            onChange: e => setQuery(e.target.value.toLocaleLowerCase()),\n            value: query\n          }));\n        } else {\n          return;\n        }\n      };\n\n      return __jsx(Container, null, __jsx(Row, {\n        xs: \"3\"\n      }, restList), __jsx(Row, null, ifRestaurantIDSearchDisplay(restaurantID)), __jsx(Row, {\n        xs: \"3\"\n      }, renderDishes(restaurantID, query)));\n    } else {\n      return __jsx(\"h1\", null, \"No such restaurant\");\n    }\n  } else {\n    const fullRestList = data.restaurants.map(res => __jsx(Col, {\n      xs: \"6\",\n      sm: \"4\",\n      key: res.id\n    }, __jsx(Card, {\n      style: {\n        margin: \"0 0.5rem 20px 0.5rem\"\n      }\n    }, __jsx(CardImg, {\n      top: true,\n      style: {\n        height: 200\n      },\n      src: API_URL + res.image.url\n    }), __jsx(CardBody, null, __jsx(CardText, null, res.description)), __jsx(\"div\", {\n      className: \"card-footer\"\n    }, __jsx(Button, {\n      color: \"info\",\n      onClick: () => setRestaurantID(res.id)\n    }, res.name)))));\n\n    const ifRestaurantIDSearchDisplay = () => {\n      if (restaurantID > 0) {\n        return __jsx(InputGroup, null, __jsx(InputGroupAddon, {\n          addonType: \"append\"\n        }, \" Search \"), __jsx(Input, {\n          onChange: e => setQuery(e.target.value.toLocaleLowerCase()),\n          value: query\n        }));\n      } else {\n        return;\n      }\n    };\n\n    return __jsx(React.Fragment, null, __jsx(Container, null, __jsx(Row, {\n      xs: \"3\"\n    }, fullRestList), __jsx(Row, {\n      xs: \"3\"\n    }, ifRestaurantIDSearchDisplay(restaurantID)), __jsx(Row, {\n      xs: \"3\"\n    }, renderDishes(restaurantID, query))));\n  }\n}\n\nexport default RestaurantList;","map":null,"metadata":{},"sourceType":"module"}